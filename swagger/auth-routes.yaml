/auth/send-otp:
  post:
    tags:
      - Authentication
    summary: Send OTP for registration
    description: Sends OTP to the provided email for user registration
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - phoneNumber
              - password
            properties:
              email:
                type: string
                format: email
                example: user@example.com
              phoneNumber:
                type: string
                example: "+919876543210"
              password:
                type: string
                format: password
                minLength: 8
                example: "password123"
    responses:
      200:
        description: OTP sent successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "OTP sent to email"
      400:
        description: Validation error or user already exists
      500:
        description: Failed to send OTP

/auth/login:
  post:
    tags:
      - Authentication
    summary: Login user
    description: Login with email and password
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: user@example.com
              password:
                type: string
                format: password
                minLength: 8
                example: "password123"
    responses:
      200:
        description: OTP sent for verification
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "OTP sent to email"
      400:
        description: Invalid credentials
      404:
        description: User not found
      500:
        description: Server error

/auth/verify-otp:
  post:
    tags:
      - Authentication
    summary: Verify OTP
    description: Verify OTP sent to email
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - otp
            properties:
              email:
                type: string
                format: email
                example: user@example.com
              otp:
                type: string
                minLength: 6
                maxLength: 6
                example: "123456"
    responses:
      200:
        description: Email verified successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Email verified successfully"
                token:
                  type: string
                  example: "jwt_token_here"
      400:
        description: Invalid OTP or OTP expired

/auth/logout:
  get:
    tags:
      - Authentication
    summary: Logout user
    description: Clear auth token cookie
    security:
      - BearerAuth: []
    responses:
      200:
        description: Logged out successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Logged out successfully"

/auth/me:
  get:
    tags:
      - Authentication
    summary: Get user profile
    description: Get logged in user details
    security:
      - BearerAuth: []
    responses:
      200:
        description: User details retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                user:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    email:
                      type: string
                      example: "user@example.com"
                    phoneNumber:
                      type: string
                      example: "+919876543210"
                    role:
                      type: array
                      items:
                        type: string
                        enum: [MENTOR, FOUNDER, INVESTOR]
                      example: ["FOUNDER"]

/auth/select-role:
  put:
    tags:
      - Authentication
    summary: Select user role
    description: Add a new role to user's existing roles
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - role
            properties:
              role:
                type: string
                enum: [MENTOR, FOUNDER, INVESTOR]
                example: "FOUNDER"
    responses:
      200:
        description: Role selected successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Role selected successfully"
      400:
        description: Invalid role or role already selected
      404:
        description: User not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
